// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TennisScores.Infrastructure.Data;

#nullable disable

namespace TennisScores.Infrastructure.Migrations
{
    [DbContext(typeof(TennisDbContext))]
    [Migration("20250821095159_addServingPlayerId")]
    partial class addServingPlayerId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TennisScores.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("GameNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTiebreak")
                        .HasColumnType("boolean");

                    b.Property<int>("Player1Points")
                        .HasColumnType("integer");

                    b.Property<int>("Player2Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("SetId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BestOfSets")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("Player1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Player2Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ScheduledStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ServingPlayerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Surface")
                        .HasColumnType("text");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.MatchFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DecidingPointEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("GamesPerSet")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SetsToWin")
                        .HasColumnType("integer");

                    b.Property<bool>("SuperTieBreakForFinalSet")
                        .HasColumnType("boolean");

                    b.Property<int>("SuperTieBreakPoints")
                        .HasColumnType("integer");

                    b.Property<bool>("TieBreakEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("TieBreakPoints")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MatchFormats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Application = "Format traditionnel",
                            DecidingPointEnabled = false,
                            GamesPerSet = 6,
                            Name = "Format 1",
                            SetsToWin = 3,
                            SuperTieBreakForFinalSet = false,
                            SuperTieBreakPoints = 10,
                            TieBreakEnabled = true,
                            TieBreakPoints = 7
                        },
                        new
                        {
                            Id = 2,
                            Application = "Format officiel 65+",
                            DecidingPointEnabled = false,
                            GamesPerSet = 6,
                            Name = "Format 2",
                            SetsToWin = 2,
                            SuperTieBreakForFinalSet = true,
                            SuperTieBreakPoints = 10,
                            TieBreakEnabled = true,
                            TieBreakPoints = 7
                        },
                        new
                        {
                            Id = 3,
                            Application = "Format TMC",
                            DecidingPointEnabled = true,
                            GamesPerSet = 4,
                            Name = "Format 3",
                            SetsToWin = 2,
                            SuperTieBreakForFinalSet = true,
                            SuperTieBreakPoints = 10,
                            TieBreakEnabled = true,
                            TieBreakPoints = 7
                        },
                        new
                        {
                            Id = 4,
                            Application = "Double Format",
                            DecidingPointEnabled = true,
                            GamesPerSet = 6,
                            Name = "Format 4",
                            SetsToWin = 2,
                            SuperTieBreakForFinalSet = true,
                            SuperTieBreakPoints = 10,
                            TieBreakEnabled = true,
                            TieBreakPoints = 7
                        },
                        new
                        {
                            Id = 5,
                            Application = "TMC à partir de 8 ans",
                            DecidingPointEnabled = true,
                            GamesPerSet = 3,
                            Name = "Format 5",
                            SetsToWin = 2,
                            SuperTieBreakForFinalSet = true,
                            SuperTieBreakPoints = 10,
                            TieBreakEnabled = true,
                            TieBreakPoints = 7
                        },
                        new
                        {
                            Id = 6,
                            Application = "TMC 11–15 ans",
                            DecidingPointEnabled = true,
                            GamesPerSet = 4,
                            Name = "Format 6",
                            SetsToWin = 2,
                            SuperTieBreakForFinalSet = true,
                            SuperTieBreakPoints = 10,
                            TieBreakEnabled = true,
                            TieBreakPoints = 7
                        },
                        new
                        {
                            Id = 7,
                            Application = "TMC 11–15 ans",
                            DecidingPointEnabled = true,
                            GamesPerSet = 5,
                            Name = "Format 7",
                            SetsToWin = 2,
                            SuperTieBreakForFinalSet = true,
                            SuperTieBreakPoints = 10,
                            TieBreakEnabled = true,
                            TieBreakPoints = 7
                        });
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("FftRanking")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<int>("PointNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PointType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.TennisSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<int>("Player1Games")
                        .HasColumnType("integer");

                    b.Property<int>("Player2Games")
                        .HasColumnType("integer");

                    b.Property<int>("SetNumber")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AgeCategory")
                        .HasColumnType("integer");

                    b.Property<int>("BallLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Condition")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MatchFormatId")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<string>("MaxRankingFft")
                        .HasColumnType("text");

                    b.Property<int?>("MinAge")
                        .HasColumnType("integer");

                    b.Property<string>("MinRankingFft")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("PrizeMoney")
                        .HasColumnType("numeric");

                    b.Property<string>("PrizeMoneyCurrency")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubType")
                        .HasColumnType("integer");

                    b.Property<int>("Surface")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchFormatId");

                    b.HasIndex("Name", "StartDate")
                        .IsUnique();

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Game", b =>
                {
                    b.HasOne("TennisScores.Domain.Entities.TennisSet", "Set")
                        .WithMany("Games")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisScores.Domain.Entities.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Set");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Match", b =>
                {
                    b.HasOne("TennisScores.Domain.Entities.Player", "Player1")
                        .WithMany("MatchesAsPlayer1")
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TennisScores.Domain.Entities.Player", "Player2")
                        .WithMany("MatchesAsPlayer2")
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TennisScores.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TennisScores.Domain.Entities.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("Tournament");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Point", b =>
                {
                    b.HasOne("TennisScores.Domain.Entities.Game", "Game")
                        .WithMany("Points")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisScores.Domain.Entities.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.TennisSet", b =>
                {
                    b.HasOne("TennisScores.Domain.Entities.Match", "Match")
                        .WithMany("Sets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisScores.Domain.Entities.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Match");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("TennisScores.Domain.Entities.MatchFormat", "MatchFormat")
                        .WithMany()
                        .HasForeignKey("MatchFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MatchFormat");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Game", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Match", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Player", b =>
                {
                    b.Navigation("MatchesAsPlayer1");

                    b.Navigation("MatchesAsPlayer2");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.TennisSet", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("TennisScores.Domain.Entities.Tournament", b =>
                {
                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
